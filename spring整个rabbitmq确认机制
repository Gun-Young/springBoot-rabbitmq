  一.通常得队列服务：发消息者，队列，消息接收者，rabbitmq在这些概念上多做了一层抽象，在发消息者和队列之间加入了

    交换器。这样发送消息者和队列就没有直接联系，转而变成发消息者把消息给交换机，交换机根据调度策略把消息再给队列。

    4个重要得概念：虚拟主机，交换机，队列和绑定

    1.1：虚拟主机：一个虚拟主机持有一组交换机，队列和绑定。为什么需要多个虚拟主机呢？RabbitMq中，用户只能在虚拟主机的

    粒度进行权限控制。因此，如果需要禁止A组访问B组的交换机，队列和绑定，必须为A和B分别创建一个虚拟主机。每个RabbitMQ服务器

    都有一个默认的虚拟主机‘/’。

    1.2：交换机：Exchange用于转发消息，但是它不会做存储，如果没有Queue bind到Exchange的话，它会直接丢掉Producer发过来的消息。

 	这里有一个比较重要的概念：路由键。消息到交换机的时候，交换机会转发到对应的队列中，那么究竟转发到哪个队列，就要根据该路由键。

    1.3：绑定：也就是交换机需要和队列想绑定，是多对多的关系



  二.交换机（Exchange）

  交换机的功能主要是接收消息并且转发到绑定的队列，交换机不存储消息，在启用ACK模式后，交换机找不到队列会返回错误。交换机有四种类型

  Direct,topic,Headers,Fanout

  2.1: Direct: 

 	 处理路由键，需要特定路由键RoutKey,全文匹配才能转发到队列上

 	 **如果两个接收程序都是用了同一个queue和相同的routingKey去绑定direct exchange的话，分发行为是负载均衡的，也就是第一个是程序1收到，第二个是

 	 程序2收到，以此类推

 	 **如果有两个接收程序用了各自的queue,但使用相同的routingKey去绑定direct exchange的话，分发的行为是复制的，也就是说每个程序都会收到这个消息的

 	 副本。行为相当于fanout类型的exchange

  2.2：Topic: 按规则转发（最灵活）

       将路由键值RoutKey和某种模式Pattern匹配，符号”#“匹配一个或多个词，符号”*“只匹配一个词。

  2.3；Headers:

  2.4；Fanout: 

   不处理路由键Routkey.只需要队列Queue绑定到交换机Exchange上。一个发送到交换机的消息都会被转发到与该交换机绑定的所有队列上，类似

   子网广播，每台子网内主机都能获得一份复制的消息。


 三.简单使用

   1.引入依赖
  <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-amqp</artifactId>
  </dependency>

   2.rabbitmq 配置
    spring.rabbitmq.host=192.168.0.86
	spring.rabbitmq.port=5672
	spring.rabbitmq.username=admin
	spring.rabbitmq.password=123456



   3.队列配置
    @Configuration
	public class RabbitConfig {

 		@Bean
		public Queue Queue() {
			return new Queue("hello");
		}

 	}



   4.发送者
    @component
	public class HelloSender {

 		@Autowired
		private AmqpTemplate rabbitTemplate;

 		public void send() {
			String context = "hello " + new Date();
			System.out.println("Sender : " + context);
			this.rabbitTemplate.convertAndSend("hello", context);
		}

 	}



     5.接收者
	@Component
	@RabbitListener(queues = "hello")
	public class HelloReceiver {

 		@RabbitHandler
		public void process(String hello) {
			System.out.println("Receiver  : " + hello);
		}

 	}


 	6.测试
	@RunWith(SpringRunner.class)
	@SpringBootTest
	public class RabbitMqHelloTest {

 		@Autowired
		private HelloSender helloSender;

 		@Test
		public void hello() throws Exception {
			helloSender.send();
		}

 	}




 四. Topic Exchange  首先对topic规则配置，这里使用两个队列来测试
	@Configuration
	public class TopicRabbitConfig {

 		final static String message = "topic.message";
		final static String messages = "topic.messages";

 		//定义队列
		@Bean
		public Queue queueMessage() {
			return new Queue(TopicRabbitConfig.message);
		}

 	    //定义队列
		@Bean
		public Queue queueMessages() {
			return new Queue(TopicRabbitConfig.messages);
		}

 		//定义交换机
		@Bean
		TopicExchange exchange() {
			return new TopicExchange("exchange");
		}

 		//将队列绑定到交换机
		@Bean
		Binding bindingExchangeMessage(Queue queueMessage, TopicExchange exchange) {
			return BindingBuilder.bind(queueMessage).to(exchange).with("topic.message");
		}

 		//将交换机绑定到交换机
		@Bean
		Binding bindingExchangeMessages(Queue queueMessages, TopicExchange exchange) {
			return BindingBuilder.bind(queueMessages).to(exchange).with("topic.#");
		}
	}

 	测试队列
	public void send1() {
		String context = "hi, i am message 1";
		System.out.println("Sender : " + context);
		this.rabbitTemplate.convertAndSend("exchange", "topic.message", context);
	}

 	public void send2() {
		String context = "hi, i am messages 2";
		System.out.println("Sender : " + context);
		this.rabbitTemplate.convertAndSend("exchange", "topic.messages", context);
	}

     发送send1会匹配到topic.#和topic.message两个Receiver都可以收到消息。发送send2只有topic.#可以收到消息





 五.Fanout Exchange 广播模式，给Fanout交换机发送消息，绑定了这个交换机的所有队列都能收到这个消息
   这里使用了 A、B、C 三个队列绑定到 Fanout 交换机上面，发送端的 routing_key 写任何字符都会被忽略：

     @Configuration
	public class FanoutRabbitConfig {

 		@Bean
		public Queue AMessage() {
			return new Queue("fanout.A");
		}

 		@Bean
		public Queue BMessage() {
			return new Queue("fanout.B");
		}

 		@Bean
		public Queue CMessage() {
			return new Queue("fanout.C");
		}

 		@Bean
		FanoutExchange fanoutExchange() {
			return new FanoutExchange("fanoutExchange");
		}

 		@Bean
		Binding bindingExchangeA(Queue AMessage,FanoutExchange fanoutExchange) {
			return BindingBuilder.bind(AMessage).to(fanoutExchange);
		}

 		@Bean
		Binding bindingExchangeB(Queue BMessage, FanoutExchange fanoutExchange) {
			return BindingBuilder.bind(BMessage).to(fanoutExchange);
		}

 		@Bean
		Binding bindingExchangeC(Queue CMessage, FanoutExchange fanoutExchange) {
			return BindingBuilder.bind(CMessage).to(fanoutExchange);
		}

 	}


     发送端：
	public void send() {
		String context = "hi, fanout msg ";
		System.out.println("Sender : " + context);
		this.rabbitTemplate.convertAndSend("fanoutExchange","", context);
    }



**********************************************ACK*************************************************

六.rabbit ACK确认

1.1:默认情况下如果一个Message被消费者所正确接收会被从Queue中移除

1.2:如果一个Queue没被任何消费者订阅，那么Queue中的消息会被Cache,当有消费者订阅时则会立即发送，当Message被消费者正确接收时，就会被从Queue中移除


二.消息发送确认

当消息无法路由到队列时，确认消息路由失败。消息成功路由时，当需要发送的队列都发送成功后，进行确认消息，对于持久化对队列意味着写入磁盘，对于镜像

队列意味着所有镜像接收成功

2.1: ConfirmCallback: 通过实现ConufirmCallback接口，消息发送到Broker后触发回调，确认消息是否到达Broker服务器，也就是只确认的是消息是否正确到达

   Exchange中，并不保证到达Queue中

	@Component
	public class RabbitTemplateConfig implements RabbitTemplate.ConfirmCallback{

    @Autowired
    private RabbitTemplate rabbitTemplate;

    @PostConstruct
    public void init(){
        rabbitTemplate.setConfirmCallback(this);            //指定 ConfirmCallback
    }

    @Override
    public void confirm(CorrelationData correlationData, boolean ack, String cause) {
        System.out.println("消息唯一标识："+correlationData);
        System.out.println("确认结果："+ack);
        System.out.println("失败原因："+cause);
    }
	
	还需要配置文件
	
	# 开启发送确认
    spring.rabbitmq.publisher-confirms=true
	
	
2.2: ReturnCallback: 通过实现ReturnCallback接口，启动消息失败返回，消息没有正确到达队列时触发回调，如果正确到达队列不执行

	@Component
	public class RabbitTemplateConfig implements RabbitTemplate.ReturnCallback{

		@Autowired
		private RabbitTemplate rabbitTemplate;

		@PostConstruct
		public void init(){
			rabbitTemplate.setReturnCallback(this);             //指定 ReturnCallback
		}

		@Override
		public void returnedMessage(Message message, int replyCode, String replyText, String exchange, String routingKey) {
			System.out.println("消息主体 message : "+message);
			System.out.println("消息主体 message : "+replyCode);
			System.out.println("描述："+replyText);
			System.out.println("消息使用的交换器 exchange : "+exchange);
			System.out.println("消息使用的路由键 routing : "+routingKey);
		}
	}
   还需要在配置文件添加配置
   
   # 开启发送失败退回
   spring.rabbitmq.publisher-returns=true



   
三.消息接收确认
  3.1： 消息通过ACK确认是否被正确接收，每个Message都要被确认(acknowledged),可以手动去ACK或者自动ACK
  
  3.2: 自动确认会在消息发送给消费者后立即确认，但存在丢失消息的可能，如果消费段消息逻辑抛出异常，也就是消费端没有处理成功这条消息，那么就相当于丢失了消息
  
  3.3： 如果消息已经被处理，但后续代码抛出一异常，使用Spring进行管理的话消费端业务逻辑会进行回滚，这也同样造成了实际意义的消息丢失
  
  3.4： 如果手动确认，即消费者调用ack,nack,reject几种方法进行确认，手动确认可以在业务失败后进行一些操作，如果消息未被ACK则会发送到下一个消费者
  
  3.5：如果某个消费服务端忘记了ACK了，则Rabbit不会再发送数据给它，因为RabbitMq认为该服务的处理能力有限
  
  3.6：ACK机制还可以起到限流作用，比如在接收到某条消息时休眠几秒钟
  
  消息确认模式有：
  
  AcknowledgeMode.NONE:自动确认， AcknowledgeMode.AUTO:根据情况确认  AcknowledgeMode.MANUAL:手动确认
  
  默认情况下消息消费者是自动ack(确认)消息的，如果要手动ack(确认)则需要修改确认模式为manual
  
  spring.rabbitmq.listener.simple.acknowledge-mode=manual
  
  或在RabbitListenerContainerFactory中进行开启手动ack
  
    @Bean
	public RabbitListenerContainerFactory<?> rabbitListenerContainerFactory(ConnectionFactory connectionFactory){
		SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();
		factory.setConnectionFactory(connectionFactory);
		factory.setMessageConverter(new Jackson2JsonMessageConverter());
		factory.setAcknowledgeMode(AcknowledgeMode.MANUAL);             //开启手动 ack
		return factory;
	}

	
   **手动进行消息确认
    @RabbitHandler
	public void processMessage2(String message,Channel channel,@Header(AmqpHeaders.DELIVERY_TAG) long tag) {
		System.out.println(message);
		try {
			channel.basicAck(tag,false);            // 确认消息      
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	需要注意的basicAck方法需要传递两个参数
	
	deliveryTag（唯一标识ID）：当一个消费者向RabbitMQ注册后，会建立一个Channel,RabbitMQ会用basic.deliver方法向消费者推送消息，
	
	这个方法携带一个deliveryTag，它代表了RabbitMQ向该Channel投递这条消息的唯一标识ID,是一个单调递增的正整数，deliveryTag的范围仅限于Channel
	
	multiple:为了减少网络流量，手动确认可以被批处理，当该参数为true时，则可以一次性确认	deliveryTag小于等于传入的所有消息

	
	** 手动否认和手动拒绝消息
	
	手动否认后(nack)后，一直重新入队列然后一直重新消费
	
	手动拒绝消息，消息会被丢弃，不会重回队列
	


	
	
消息可靠总结--->
持久化:
exchange要持久化
queue要持久化
message要持久化

消息确认------>
启动消费返回（@ReturnList注解，生产者就可以知道哪些消息没有发出去）
生产者和Server（broker）之间的消息确认
消费者和Server（broker）之间的消息确认


参考链接：https://www.jianshu.com/p/2c5eebfd0e95  https://www.jianshu.com/p/19e0927315da



************************************************************消息确认ACK代码实例*************************************************
1.配置rabbitmq参数
#主机地址
spring.rabbitmq.host=192.168.1.204
#端口
spring.rabbitmq.prot=5672
#用户名
spring.rabbitmq.username=test
#密码
spring.rabbitmq.password=test1234
# 开启发送确认
spring.rabbitmq.publisher-confirms=true
# 开启发送失败退回
spring.rabbitmq.publisher-returns=true
# 开启手动ACK
spring.rabbitmq.listener.simple.acknowledge-mode=manual




2.rabbitmq相关config

import org.springframework.amqp.rabbit.connection.CachingConnectionFactory;
import org.springframework.amqp.rabbit.connection.ConnectionFactory;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
/**
 * Broker:它提供一种传输机制，它的角色就是维护一条从生产者到消费者的线路，保证数据能按照指定的方式进行传输
 * Exchange: 消息交换机，它指定消息按照什么规则，路由到那个队列
 * Queue:消息的载体，每个消息都会被投到一个或多个队列
 * Binding: 绑定，它的作用就是把exchange和queue按照路由规则绑定起来
 * Routing key: 路由关键字，exchange根据这个关键字进行消息投递
 * vhost:虚拟主机，一个broker里可以有多个vhost,用作不同用户的权限分离
 * Producer: 消息的生产者，就是投递消息的程序
 * Consumer:消息消费者，就是接收消息的程序
 * Channel: 消息通道，在客户端的每个连接里，可以建立多个channel
 */

@Configuration
public class RabbitmqConfig {

    @Value("${spring.rabbitmq.host:}")
    private String host;

    @Value("${spring.rabbitmq.port:}")
    private String port;

    @Value("${spring.rabbitmq.username:}")
    private String username;

    @Value("${spring.rabbitmq.password:}")
    private String password;

    private static String vhost = "/pay/lm";

    private static String EXCHANGENAME = "heiheiExchange";

   //队列
    @Bean
    public Queue queue(){
        return new Queue("testheihei");
    }
    //交换机
    @Bean
    public DirectExchange directExchange(){
        return new DirectExchange(EXCHANGENAME);
    }
    //绑定队列和交换机
    @Bean
    public Binding bindingQueueToExchange(Queue queue,DirectExchange directExchange){
        return BindingBuilder.bind(queue).to(directExchange).with("heihei");
    }

    //连接工厂
    @Bean
    public ConnectionFactory connectionFactory(){
        CachingConnectionFactory factory = new CachingConnectionFactory();
        factory.setAddresses(host+":"+port);
        factory.setVirtualHost(vhost);
        factory.setUsername(username);
        factory.setPassword(password);
	//confirm 回调
        factory.setPublisherConfirms(true); 
	//return  回调
        factory.setPublisherReturns(true);
        return factory;
    }

    //操作模板
    @Bean
    public RabbitTemplate rabbitTemplate(ConnectionFactory connectionFactory){
        return new RabbitTemplate(connectionFactory);
    }

}





3.消息生产者
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.amqp.core.Message;
import org.springframework.amqp.rabbit.connection.CorrelationData;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import javax.annotation.PostConstruct;
import java.util.Date;

@Component
public class MsgProducer implements  RabbitTemplate.ConfirmCallback,RabbitTemplate.ReturnCallback{

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    @Autowired
    private RabbitTemplate rabbitTemplate;

    @PostConstruct
    public void init(){
        rabbitTemplate.setConfirmCallback(this);
        rabbitTemplate.setReturnCallback(this);
    }

    public void send(){
        String message = "hello"+new Date();
        System.out.println("发送的消息："+message);
        this.rabbitTemplate.convertAndSend("heiheiExchange","heihei",message);
    }

    /**
     * 实现ConfirmCallback
     * ACK = true 仅仅表示消息已被Broker接收到，并不表示已成功投放到消息队列中
     * ACK = false 表示消息由于Broker接收到，消息并未处理成功
     *
     * @param correlationData
     * @param ack
     * @param cause
     */
    @Override
    public void confirm(CorrelationData correlationData, boolean ack, String cause) {
        if(ack){
            System.out.println("消息发送到交换机成功");
        }else{
            System.out.println("消息发送到交换机失败，原因："+cause);
        }
    }

    /**
     *  实现ReturnCallback
     *  消息没有正确到达队列时触发回调，如果正确到达队列不执行
     *
     * @param message
     * @param replyCode
     * @param replyText
     * @param exchange
     * @param routingKey
     */
    @Override
    public void returnedMessage(Message message, int replyCode, String replyText, String exchange, String routingKey) {
          System.out.println("return message 回调过来了......");
    }
}



4.消息消费者
import com.rabbitmq.client.Channel;
import org.springframework.amqp.core.Message;
import org.springframework.amqp.rabbit.annotation.RabbitHandler;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.stereotype.Component;

@Component
@RabbitListener(queues = "testheihei")
public class MsgReceiver{

    @RabbitHandler
    public void process(String msg, Channel channel, Message message) throws Exception{
        System.out.println("接收到的消息："+msg);
        channel.basicAck(message.getMessageProperties().getDeliveryTag(),false);
    }
}
















