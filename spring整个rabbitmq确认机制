一.rabbit ACK确认

1.1:默认情况下如果一个Message被消费者所正确接收会被从Queue中移除

1.2:如果一个Queue没被任何消费者订阅，那么Queue中的消息会被Cache,当有消费者订阅时则会立即发送，当Message被消费者正确接收时，就会被从Queue中移除


二.消息发送确认

当消息无法路由到队列时，确认消息路由失败。消息成功路由时，当需要发送的队列都发送成功后，进行确认消息，对于持久化对队列意味着写入磁盘，对于镜像

队列意味着所有镜像接收成功

2.1: ConfirmCallback: 通过实现ConufirmCallback接口，消息发送到Broker后触发回调，确认消息是否到达Broker服务器，也就是只确认的是消息是否正确到达

   Exchange中，并不保证到达Queue中

	@Component
	public class RabbitTemplateConfig implements RabbitTemplate.ConfirmCallback{

    @Autowired
    private RabbitTemplate rabbitTemplate;

    @PostConstruct
    public void init(){
        rabbitTemplate.setConfirmCallback(this);            //指定 ConfirmCallback
    }

    @Override
    public void confirm(CorrelationData correlationData, boolean ack, String cause) {
        System.out.println("消息唯一标识："+correlationData);
        System.out.println("确认结果："+ack);
        System.out.println("失败原因："+cause);
    }
	
	还需要配置文件
	
	# 开启发送确认
    spring.rabbitmq.publisher-confirms=true
	
	
2.2: ReturnCallback: 通过实现ReturnCallback接口，启动消息失败返回，消息没有正确到达队列时触发回调，如果正确到达队列不执行

	@Component
	public class RabbitTemplateConfig implements RabbitTemplate.ReturnCallback{

		@Autowired
		private RabbitTemplate rabbitTemplate;

		@PostConstruct
		public void init(){
			rabbitTemplate.setReturnCallback(this);             //指定 ReturnCallback
		}

		@Override
		public void returnedMessage(Message message, int replyCode, String replyText, String exchange, String routingKey) {
			System.out.println("消息主体 message : "+message);
			System.out.println("消息主体 message : "+replyCode);
			System.out.println("描述："+replyText);
			System.out.println("消息使用的交换器 exchange : "+exchange);
			System.out.println("消息使用的路由键 routing : "+routingKey);
		}
	}
   还需要在配置文件添加配置
   
   # 开启发送失败退回
   spring.rabbitmq.publisher-returns=true



   
三.消息接收确认
  3.1： 消息通过ACK确认是否被正确接收，每个Message都要被确认(acknowledged),可以手动去ACK或者自动ACK
  
  3.2: 自动确认会在消息发送给消费者后立即确认，但存在丢失消息的可能，如果消费段消息逻辑抛出异常，也就是消费端没有处理成功这条消息，那么就相当于丢失了消息
  
  3.3： 如果消息已经被处理，但后续代码抛出一异常，使用Spring进行管理的话消费端业务逻辑会进行回滚，这也同样造成了实际意义的消息丢失
  
  3.4： 如果手动确认，即消费者调用ack,nack,reject几种方法进行确认，手动确认可以在业务失败后进行一些操作，如果消息未被ACK则会发送到下一个消费者
  
  3.5：如果某个消费服务端忘记了ACK了，则Rabbit不会再发送数据给它，因为RabbitMq认为该服务的处理能力有限
  
  3.6：ACK机制还可以起到限流作用，比如在接收到某条消息时休眠几秒钟
  
  消息确认模式有：
  
  AcknowledgeMode.NONE:自动确认， AcknowledgeMode.AUTO:根据情况确认  AcknowledgeMode.MANUAL:手动确认
  
  默认情况下消息消费者是自动ack(确认)消息的，如果要手动ack(确认)则需要修改确认模式为manual
  
  spring.rabbitmq.listener.simple.acknowledge-mode=manual
  
  或在RabbitListenerContainerFactory中进行开启手动ack
  
    @Bean
	public RabbitListenerContainerFactory<?> rabbitListenerContainerFactory(ConnectionFactory connectionFactory){
		SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();
		factory.setConnectionFactory(connectionFactory);
		factory.setMessageConverter(new Jackson2JsonMessageConverter());
		factory.setAcknowledgeMode(AcknowledgeMode.MANUAL);             //开启手动 ack
		return factory;
	}

	
   **手动进行消息确认
    @RabbitHandler
	public void processMessage2(String message,Channel channel,@Header(AmqpHeaders.DELIVERY_TAG) long tag) {
		System.out.println(message);
		try {
			channel.basicAck(tag,false);            // 确认消息      
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	需要注意的basicAck方法需要传递两个参数
	
	deliveryTag（唯一标识ID）：当一个消费者向RabbitMQ注册后，会建立一个Channel,RabbitMQ会用basic.deliver方法向消费者推送消息，
	
	这个方法携带一个deliveryTag，它代表了RabbitMQ向该Channel投递这条消息的唯一标识ID,是一个单调递增的正整数，deliveryTag的范围仅限于Channel
	
	multiple:为了减少网络流量，手动确认可以被批处理，当该参数为true时，则可以一次性确认	deliveryTag小于等于传入的所有消息

	
	** 手动否认和手动拒绝消息
	
	手动否认后(nack)后，一直重新入队列然后一直重新消费
	
	手动拒绝消息，消息会被丢弃，不会重回队列
	


	
	
消息可靠总结

持久化

exchange要持久化
queue要持久化
message要持久化


消息确认

启动消费返回（@ReturnList注解，生产者就可以知道哪些消息没有发出去）
生产者和Server（broker）之间的消息确认
消费者和Server（broker）之间的消息确认


参考链接：https://www.jianshu.com/p/2c5eebfd0e95  https://www.jianshu.com/p/19e0927315da




